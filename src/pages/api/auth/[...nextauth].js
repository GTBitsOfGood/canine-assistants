import { MongoDBAdapter } from "@next-auth/mongodb-adapter";
import NextAuth from "next-auth";
import dbConnect, {
  DB_CONNECTION_STRING,
} from "../../../../server/db/dbConnect";
import GoogleProvider from "next-auth/providers/google";

let cachedPromise;

import { MongoClient, ObjectId } from "mongodb";
import User from "../../../../server/db/models/User";

import CredentialsProvider from "next-auth/providers/credentials";
import { verifyUser, signup } from "../../../../server/db/actions/User";

const client = new MongoClient(DB_CONNECTION_STRING);

const retrievePromise = () => {
  if (cachedPromise) {
    return cachedPromise;
  } else {
    cachedPromise = client.connect();
    return cachedPromise;
  }
};

/**
 * @type {import("next-auth").NextAuthOptions}
 */
export const authOptions = {
  adapter: MongoDBAdapter(retrievePromise()),

  // Use JWTs for everything session-related
  session: {
    strategy: "jwt",
  },
  secret: process.env.NEXTAUTH_SECRET,
  providers: [
    CredentialsProvider({
      id: "credentials",
      name: "Login with Username and Password",

      async authorize(credentials) {
        const response = await verifyUser(
          credentials.email,
          credentials.password,
        );

        if (response.status === 200) {
          return response.data;
        } else {
          throw new Error(response.message);
        }
      },
      credentials: {
        email: { label: "Email", type: "text" },
        password: { label: "Password", type: "password" },
      },
    }),
    CredentialsProvider({
      id: "signup",
      name: "Signup with Email and Password",

      async authorize(credentials) {
        const response = await signup(
          credentials.email,
          credentials.password,
          credentials.name,
        );

        if (response.status === 200) {
          return response.data;
        } else {
          throw new Error(response.message);
        }
      },
      credentials: {
        email: { label: "Email", type: "text" },
        password: { label: "Password", type: "password" },
        name: { label: "Name", type: "text" },
      },
    }),
    GoogleProvider({
      id: "google",
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
  ],
  pages: {
    signIn: "/login",
    // newUser: "/signup",
    // error: "/login",
  },
  events: {
    createUser: async (message) => {
      // TODO: Problem: Google won't link a user to an account if the user is already in the database
      // await dbConnect();
      // // await User.deleteOne({ _id }); // delete the user automatically generated by next-auth
      // const invitedUser = await User.findOne({ email: message.user.email, _id: { $not: { $eq: message.user.id } } });
      // await User.updateOne({ _id: message.user.id }, { acceptedInvite: true, isActive: true, role: invitedUser.role });
      // await User.deleteOne({ _id: invitedUser._id }); // delete the previously invited user
      await User.updateOne(
        { _id: message.user.id },
        { acceptedInvite: true, isActive: true, role: "User" },
      );
    },
  },
  callbacks: {
    async signIn({ user, account }) {
      console.log("Here2", user, account);
      const email = user.email
        ? user.email.toLowerCase()
        : user._doc.email.toLowerCase();
      const invitedUser = await User.findOne({ email });
      // TODO: let any user sign in with google
      if (
        account.provider != "google" &&
        (!invitedUser || !invitedUser.isActive)
      ) {
        return false;
      }
      return true;
    },
    async jwt({ token, user }) {
      if (user) {
        token.name = user.name;
        token.role = user.role;
      } else {
        const user = await User.findById(token.sub);
        token.name = user.name;
        token.role = user.role;
      }
      return token;
    },

    session: async ({ session, token }) => {
      if (token) {
        session.user.role = token.role;
        session.user._id = token.sub;
      }
      return session;
    },
  },
};

export default NextAuth(authOptions);
